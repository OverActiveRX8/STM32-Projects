<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [ADCDemo\ADCDemo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ADCDemo\ADCDemo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Nov 01 16:52:57 2019
<BR><P>
<H3>Maximum Stack Usage =        812 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lv_ta_scrollable_design &rArr; lv_draw_label &rArr; lv_draw_rect &rArr; lv_draw_shadow &rArr; lv_draw_shadow_full &rArr; lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC_IRQHandler</a><BR>
 <LI><a href="#[19]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">HardFault_Handler</a><BR>
 <LI><a href="#[18]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">MemManage_Handler</a><BR>
 <LI><a href="#[1a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">UsageFault_Handler</a><BR>
 <LI><a href="#[27b]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27b]">lv_refr_obj</a><BR>
 <LI><a href="#[277]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[277]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[25f]">refresh_children_position</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25f]">refresh_children_position</a><BR>
 <LI><a href="#[25b]">lv_obj_get_screen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25b]">lv_obj_get_screen</a><BR>
 <LI><a href="#[210]">lv_event_send_func</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18b]">lv_event_send</a><BR>
 <LI><a href="#[1af]">indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1af]">indev_search_obj</a><BR>
 <LI><a href="#[27e]">lv_ta_add_text</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27d]">lv_ta_add_char</a><BR>
 <LI><a href="#[260]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[260]">refresh_children_style</a><BR>
 <LI><a href="#[29f]">usmart_strcmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29f]">usmart_strcmp</a><BR>
 <LI><a href="#[2a8]">usmart_strcopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a8]">usmart_strcopy</a><BR>
 <LI><a href="#[2a4]">usmart_search_nextc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a4]">usmart_search_nextc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[73]">ADC_DMAConvCplt</a> from stm32f4xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[75]">ADC_DMAError</a> from stm32f4xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[74]">ADC_DMAHalfConvCplt</a> from stm32f4xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[31]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[79]">FT5206_Scan</a> from ft5206.o(i.FT5206_Scan) referenced from touch.o(i.TP_Init)
 <LI><a href="#[78]">GT9147_Scan</a> from gt9147.o(i.GT9147_Scan) referenced from touch.o(i.TP_Init)
 <LI><a href="#[6e]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">OTT2001A_Scan</a> from ott2001a.o(i.OTT2001A_Scan) referenced from touch.o(i.TP_Init)
 <LI><a href="#[20]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[21]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM4_IRQHandler</a> from usmart.o(i.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">TIM7_IRQHandler</a> from stm32f4xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">TP_Adjust</a> from touch.o(i.TP_Adjust) referenced 2 times from touch.o(.data)
 <LI><a href="#[1]">TP_Init</a> from touch.o(i.TP_Init) referenced 2 times from touch.o(.data)
 <LI><a href="#[2]">TP_Scan</a> from touch.o(i.TP_Scan) referenced 2 times from touch.o(.data)
 <LI><a href="#[53]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[44]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[7b]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[7f]">anim_task</a> from lv_anim.o(i.anim_task) referenced from lv_anim.o(i.lv_anim_core_init)
 <LI><a href="#[a2]">cursor_blink_anim</a> from lv_ta.o(i.cursor_blink_anim) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[a2]">cursor_blink_anim</a> from lv_ta.o(i.cursor_blink_anim) referenced from lv_ta.o(i.lv_ta_set_cursor_pos)
 <LI><a href="#[6]">delay_ms</a> from delay.o(i.delay_ms) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[7]">delay_us</a> from delay.o(i.delay_us) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[99]">edge_flash_anim</a> from lv_page.o(i.edge_flash_anim) referenced from lv_page.o(i.lv_page_start_edge_flash)
 <LI><a href="#[9a]">edge_flash_anim_end</a> from lv_page.o(i.edge_flash_anim_end) referenced from lv_page.o(i.lv_page_start_edge_flash)
 <LI><a href="#[7a]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[7e]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(i.kern_pair_16_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[7d]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(i.kern_pair_8_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[8d]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[8d]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_page.o(i.lv_page_scroll_hor)
 <LI><a href="#[8d]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_page.o(i.lv_page_scroll_ver)
 <LI><a href="#[8d]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_page.o(i.lv_page_start_edge_flash)
 <LI><a href="#[9d]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_add_char)
 <LI><a href="#[9d]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_add_text)
 <LI><a href="#[9d]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[9d]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_set_cursor_pos)
 <LI><a href="#[9d]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_set_text)
 <LI><a href="#[80]">lv_cont_signal</a> from lv_cont.o(i.lv_cont_signal) referenced from lv_cont.o(i.lv_cont_create)
 <LI><a href="#[81]">lv_disp_refr_task</a> from lv_refr.o(i.lv_disp_refr_task) referenced from lv_hal_disp.o(i.lv_disp_drv_register)
 <LI><a href="#[d]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt) referenced 2 times from lv_font_roboto_16.o(.data)
 <LI><a href="#[c]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt) referenced 2 times from lv_font_roboto_16.o(.data)
 <LI><a href="#[89]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_close) referenced from lv_img_decoder.o(i.lv_img_decoder_init)
 <LI><a href="#[86]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_info) referenced from lv_img_decoder.o(i.lv_img_decoder_init)
 <LI><a href="#[87]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_open) referenced from lv_img_decoder.o(i.lv_img_decoder_init)
 <LI><a href="#[88]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_read_line) referenced from lv_img_decoder.o(i.lv_img_decoder_init)
 <LI><a href="#[8a]">lv_indev_read_task</a> from lv_indev.o(i.lv_indev_read_task) referenced from lv_hal_indev.o(i.lv_indev_drv_register)
 <LI><a href="#[8b]">lv_label_design</a> from lv_label.o(i.lv_label_design) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[8e]">lv_label_set_offset_x</a> from lv_label.o(i.lv_label_set_offset_x) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[8e]">lv_label_set_offset_x</a> from lv_label.o(i.lv_label_set_offset_x) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[8f]">lv_label_set_offset_y</a> from lv_label.o(i.lv_label_set_offset_y) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[8f]">lv_label_set_offset_y</a> from lv_label.o(i.lv_label_set_offset_y) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[8c]">lv_label_signal</a> from lv_label.o(i.lv_label_signal) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[83]">lv_ll_get_head</a> from lv_ll.o(i.lv_ll_get_head) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[82]">lv_ll_get_next</a> from lv_ll.o(i.lv_ll_get_next) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[84]">lv_ll_get_prev</a> from lv_ll.o(i.lv_ll_get_prev) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[85]">lv_ll_get_tail</a> from lv_ll.o(i.lv_ll_get_tail) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[93]">lv_obj_design</a> from lv_obj.o(i.lv_obj_design) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[90]">lv_obj_set_x</a> from lv_obj.o(i.lv_obj_set_x) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[90]">lv_obj_set_x</a> from lv_obj.o(i.lv_obj_set_x) referenced from lv_page.o(i.lv_page_scroll_hor)
 <LI><a href="#[91]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[91]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from lv_page.o(i.lv_page_scroll_ver)
 <LI><a href="#[92]">lv_obj_signal</a> from lv_obj.o(i.lv_obj_signal) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[96]">lv_page_design</a> from lv_page.o(i.lv_page_design) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[94]">lv_page_scrollable_signal</a> from lv_page.o(i.lv_page_scrollable_signal) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[95]">lv_page_signal</a> from lv_page.o(i.lv_page_signal) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[97]">lv_scrl_design</a> from lv_page.o(i.lv_scrl_design) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[a0]">lv_ta_design</a> from lv_ta.o(i.lv_ta_design) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[a1]">lv_ta_scrollable_design</a> from lv_ta.o(i.lv_ta_scrollable_design) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[9f]">lv_ta_scrollable_signal</a> from lv_ta.o(i.lv_ta_scrollable_signal) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[9e]">lv_ta_signal</a> from lv_ta.o(i.lv_ta_signal) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[12]">lv_txt_unicode_to_utf8</a> from lv_txt.o(i.lv_txt_unicode_to_utf8) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[11]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(i.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[13]">lv_txt_utf8_get_char_id</a> from lv_txt.o(i.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[14]">lv_txt_utf8_get_length</a> from lv_txt.o(i.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[f]">lv_txt_utf8_next</a> from lv_txt.o(i.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[10]">lv_txt_utf8_prev</a> from lv_txt.o(i.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[e]">lv_txt_utf8_size</a> from lv_txt.o(i.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[70]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a3]">my_disp_flush</a> from main.o(i.my_disp_flush) referenced from main.o(i.main)
 <LI><a href="#[a4]">my_touchpad_read</a> from main.o(i.my_touchpad_read) referenced from main.o(i.main)
 <LI><a href="#[9b]">pwd_char_hider_anim</a> from lv_ta.o(i.pwd_char_hider_anim) referenced from lv_ta.o(i.lv_ta_add_char)
 <LI><a href="#[9b]">pwd_char_hider_anim</a> from lv_ta.o(i.pwd_char_hider_anim) referenced from lv_ta.o(i.lv_ta_add_text)
 <LI><a href="#[9b]">pwd_char_hider_anim</a> from lv_ta.o(i.pwd_char_hider_anim) referenced from lv_ta.o(i.lv_ta_set_text)
 <LI><a href="#[9c]">pwd_char_hider_anim_ready</a> from lv_ta.o(i.pwd_char_hider_anim_ready) referenced from lv_ta.o(i.lv_ta_add_char)
 <LI><a href="#[9c]">pwd_char_hider_anim_ready</a> from lv_ta.o(i.pwd_char_hider_anim_ready) referenced from lv_ta.o(i.lv_ta_add_text)
 <LI><a href="#[9c]">pwd_char_hider_anim_ready</a> from lv_ta.o(i.pwd_char_hider_anim_ready) referenced from lv_ta.o(i.lv_ta_set_text)
 <LI><a href="#[4]">read_addr</a> from usmart.o(i.read_addr) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[98]">scrl_def_event_cb</a> from lv_page.o(i.scrl_def_event_cb) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[7c]">unicode_list_compare</a> from lv_font_fmt_txt.o(i.unicode_list_compare) referenced from lv_font_fmt_txt.o(i.get_glyph_dsc_id)
 <LI><a href="#[9]">usmart_cmd_rec</a> from usmart.o(i.usmart_cmd_rec) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[a]">usmart_exe</a> from usmart.o(i.usmart_exe) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[8]">usmart_init</a> from usmart.o(i.usmart_init) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[b]">usmart_scan</a> from usmart.o(i.usmart_scan) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[5]">write_addr</a> from usmart.o(i.write_addr) referenced 2 times from usmart_config.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2ac]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[a5]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bc]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2ad]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2ae]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2af]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2b0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2b1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_color_fill
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>

<P><STRONG><a name="[2b2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2b3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>

<P><STRONG><a name="[2b5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[188]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2string
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2String
</UL>

<P><STRONG><a name="[186]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2string
</UL>

<P><STRONG><a name="[215]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_cut
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
</UL>

<P><STRONG><a name="[e8]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[252]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getadcValue
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2string
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRMS
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[2b6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRMS
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getadcValue
</UL>

<P><STRONG><a name="[2b7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b8]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[2b9]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2ba]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2bc]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[af]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[162]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2bd]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a6]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2be]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>AT24CXX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 24cxx.o(i.AT24CXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AT24CXX_Init &rArr; IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[c2]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(i.AT24CXX_ReadLenByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AT24CXX_ReadLenByte &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
</UL>

<P><STRONG><a name="[c3]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, 24cxx.o(i.AT24CXX_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
</UL>

<P><STRONG><a name="[c9]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(i.AT24CXX_WriteLenByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
</UL>

<P><STRONG><a name="[ca]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
</UL>

<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>CT_IIC_Ack</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[cc]"></a>CT_IIC_Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ctiic.o(i.CT_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CT_IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>

<P><STRONG><a name="[ce]"></a>CT_IIC_NAck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[cf]"></a>CT_IIC_Read_Byte</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ctiic.o(i.CT_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
</UL>

<P><STRONG><a name="[d0]"></a>CT_IIC_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ctiic.o(i.CT_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CT_IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
</UL>

<P><STRONG><a name="[d1]"></a>CT_IIC_Start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
</UL>

<P><STRONG><a name="[d2]"></a>CT_IIC_Stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
</UL>

<P><STRONG><a name="[d3]"></a>CT_IIC_Wait_Ack</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
</UL>

<P><STRONG><a name="[d4]"></a>CalcAVG</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rms.o(i.CalcAVG))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CalcAVG &rArr; FrontAndDequeue &rArr; Front &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFull
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAndDequeue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>CalcRMS</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, rms.o(i.CalcRMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CalcRMS &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFull
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAndDequeue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>CreateQueue</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, queues.o(i.CreateQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CreateQueue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeEmpty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuff
</UL>

<P><STRONG><a name="[57]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>Dequeue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queues.o(i.Dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dequeue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Succ
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAndDequeue
</UL>

<P><STRONG><a name="[d7]"></a>Enqueue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, queues.o(i.Enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Enqueue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Succ
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRMS
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAVG
</UL>

<P><STRONG><a name="[f0]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[106]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[104]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[105]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[e2]"></a>FT5206_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, ft5206.o(i.FT5206_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FT5206_Init &rArr; FT5206_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[e4]"></a>FT5206_RD_Reg</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ft5206.o(i.FT5206_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FT5206_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Scan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
</UL>

<P><STRONG><a name="[79]"></a>FT5206_Scan</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, ft5206.o(i.FT5206_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FT5206_Scan &rArr; FT5206_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.TP_Init)
</UL>
<P><STRONG><a name="[e3]"></a>FT5206_WR_Reg</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ft5206.o(i.FT5206_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FT5206_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
</UL>

<P><STRONG><a name="[e5]"></a>Front</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queues.o(i.Front))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Front &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAndDequeue
</UL>

<P><STRONG><a name="[d6]"></a>FrontAndDequeue</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queues.o(i.FrontAndDequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FrontAndDequeue &rArr; Front &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRMS
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAVG
</UL>

<P><STRONG><a name="[e6]"></a>GT9147_Init</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, gt9147.o(i.GT9147_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GT9147_Init &rArr; GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Send_Cfg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[e7]"></a>GT9147_RD_Reg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gt9147.o(i.GT9147_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Scan
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[78]"></a>GT9147_Scan</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, gt9147.o(i.GT9147_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GT9147_Scan &rArr; GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.TP_Init)
</UL>
<P><STRONG><a name="[ea]"></a>GT9147_Send_Cfg</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gt9147.o(i.GT9147_Send_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT9147_Send_Cfg &rArr; GT9147_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[e9]"></a>GT9147_WR_Reg</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gt9147.o(i.GT9147_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GT9147_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Send_Cfg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Scan
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[bf]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[bd]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[eb]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[f2]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[f7]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>HAL_GPIO_Init</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10a]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[fd]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[f9]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[152]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[151]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[100]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[101]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[102]"></a>HAL_SRAM_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lcd.o(i.HAL_SRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[108]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[14f]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[153]"></a>HAL_UART_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_UART_MspInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[154]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[119]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>IIC_Ack</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, myiic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[c1]"></a>IIC_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, myiic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[11e]"></a>IIC_NAck</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, myiic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[c7]"></a>IIC_Read_Byte</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, myiic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c5]"></a>IIC_Send_Byte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c4]"></a>IIC_Start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c8]"></a>IIC_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c6]"></a>IIC_Wait_Ack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[11f]"></a>InitBuff</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rms.o(i.InitBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitBuff &rArr; CreateQueue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateQueue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>IsFull</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queues.o(i.IsFull))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRMS
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAVG
</UL>

<P><STRONG><a name="[120]"></a>LCD_Clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[123]"></a>LCD_Display_Dir</STRONG> (Thumb, 212 bytes, Stack size 36 bytes, lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[125]"></a>LCD_DrawLine</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, lcd.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[126]"></a>LCD_DrawPoint</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lcd.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[127]"></a>LCD_Draw_Circle</STRONG> (Thumb, 176 bytes, Stack size 44 bytes, lcd.o(i.LCD_Draw_Circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_Draw_Circle &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[128]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lcd.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_disp_flush
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[12b]"></a>LCD_Init</STRONG> (Thumb, 9116 bytes, Stack size 120 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LCD_Init &rArr; LCD_SSD_BackLightSet &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>LCD_Pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(i.LCD_Pow))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[12c]"></a>LCD_RD_DATA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[12e]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lcd.o(i.LCD_SSD_BackLightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[124]"></a>LCD_Scan_Dir</STRONG> (Thumb, 434 bytes, Stack size 20 bytes, lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[121]"></a>LCD_SetCursor</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[12f]"></a>LCD_ShowChar</STRONG> (Thumb, 204 bytes, Stack size 52 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[130]"></a>LCD_ShowNum</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
</UL>

<P><STRONG><a name="[132]"></a>LCD_ShowString</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
</UL>

<P><STRONG><a name="[12a]"></a>LCD_WR_DATA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[129]"></a>LCD_WR_REG</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[122]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[12d]"></a>LCD_WriteReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>

<P><STRONG><a name="[133]"></a>MX_ADC1_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>MX_ADC2_Init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, adc.o(i.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>MX_DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[297]"></a>MX_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>MX_TIM6_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>MX_TIM7_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tim.o(i.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM7_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>MakeEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queues.o(i.MakeEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateQueue
</UL>

<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>OTT2001A_Init</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, ott2001a.o(i.OTT2001A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OTT2001A_Init &rArr; OTT2001A_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_SensorControl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[13c]"></a>OTT2001A_RD_Reg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ott2001a.o(i.OTT2001A_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OTT2001A_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>

<P><STRONG><a name="[77]"></a>OTT2001A_Scan</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, ott2001a.o(i.OTT2001A_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OTT2001A_Scan &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.TP_Init)
</UL>
<P><STRONG><a name="[13b]"></a>OTT2001A_SensorControl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ott2001a.o(i.OTT2001A_SensorControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OTT2001A_SensorControl &rArr; OTT2001A_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>

<P><STRONG><a name="[13d]"></a>OTT2001A_WR_Reg</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ott2001a.o(i.OTT2001A_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OTT2001A_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_SensorControl
</UL>

<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13f]"></a>SystemClock_Config</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usmart.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; getadcValue &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRMS
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAVG
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getadcValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM7_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM7_IRQHandler &rArr; lv_task_handler &rArr; lv_task_exec &rArr; lv_task_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_inc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[143]"></a>TP_Adj_Info_Show</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, touch.o(i.TP_Adj_Info_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[3]"></a>TP_Adjust</STRONG> (Thumb, 1426 bytes, Stack size 120 bytes, touch.o(i.TP_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[144]"></a>TP_Drow_Touch_Point</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, touch.o(i.TP_Drow_Touch_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TP_Drow_Touch_Point &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[145]"></a>TP_Get_Adjdata</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, touch.o(i.TP_Get_Adjdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TP_Get_Adjdata &rArr; AT24CXX_ReadLenByte &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[1]"></a>TP_Init</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, touch.o(i.TP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = TP_Init &rArr; TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[14a]"></a>TP_Read_AD</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, touch.o(i.TP_Read_AD))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>

<P><STRONG><a name="[14c]"></a>TP_Read_XOY</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, touch.o(i.TP_Read_XOY))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>

<P><STRONG><a name="[149]"></a>TP_Read_XY</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, touch.o(i.TP_Read_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[14d]"></a>TP_Read_XY2</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, touch.o(i.TP_Read_XY2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[148]"></a>TP_Save_Adjdata</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, touch.o(i.TP_Save_Adjdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TP_Save_Adjdata &rArr; AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[2]"></a>TP_Scan</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, touch.o(i.TP_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TP_Scan &rArr; TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[14b]"></a>TP_Write_Byte</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, touch.o(i.TP_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TP_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>

<P><STRONG><a name="[14e]"></a>Timer4_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usmart.o(i.Timer4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Timer4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_init
</UL>

<P><STRONG><a name="[44]"></a>USART1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c1]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[dc]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuff
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dequeue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateQueue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>

<P><STRONG><a name="[2c2]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2c3]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[157]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c4]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[185]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2string
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2String
</UL>

<P><STRONG><a name="[2c5]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2c6]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[163]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[158]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getadcValue
</UL>

<P><STRONG><a name="[da]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRMS
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[161]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15b]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[159]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15c]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[160]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2c7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2c8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2c9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[15a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[168]"></a>adcarrayInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(i.adcarrayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = adcarrayInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Write_Byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[176]"></a>displayScr</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, screen.o(i.displayScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = displayScr &rArr; lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_type
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[183]"></a>float2string</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, nts.o(i.float2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = float2string &rArr; int2String &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intSize
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2String
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[299]"></a>getMax</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rms.o(i.getMax))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29a]"></a>getMin</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rms.o(i.getMin))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>getadcValue</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, adc.o(i.getadcValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = getadcValue &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>int2String</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nts.o(i.int2String))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = int2String &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2string
</UL>

<P><STRONG><a name="[184]"></a>intSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nts.o(i.intSize))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2string
</UL>

<P><STRONG><a name="[1b9]"></a>lv_anim_core_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_anim.o(i.lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_anim_core_init &rArr; lv_task_create &rArr; lv_task_create_basic &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1bc]"></a>lv_anim_create</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_anim_create &rArr; lv_anim_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_start_edge_flash
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_hor
</UL>

<P><STRONG><a name="[1bd]"></a>lv_anim_del</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lv_anim.o(i.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_anim_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[8d]"></a>lv_anim_path_linear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_path_linear))
<BR>[Address Reference Count : 4]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_page.o(i.lv_page_scroll_hor)
<LI> lv_page.o(i.lv_page_scroll_ver)
<LI> lv_page.o(i.lv_page_start_edge_flash)
</UL>
<P><STRONG><a name="[9d]"></a>lv_anim_path_step</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_path_step))
<BR>[Address Reference Count : 5]<UL><LI> lv_ta.o(i.lv_ta_create)
<LI> lv_ta.o(i.lv_ta_add_char)
<LI> lv_ta.o(i.lv_ta_add_text)
<LI> lv_ta.o(i.lv_ta_set_cursor_pos)
<LI> lv_ta.o(i.lv_ta_set_text)
</UL>
<P><STRONG><a name="[24e]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[279]"></a>lv_area_get_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
</UL>

<P><STRONG><a name="[1ed]"></a>lv_area_intersect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_area.o(i.lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
</UL>

<P><STRONG><a name="[20c]"></a>lv_area_is_in</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
</UL>

<P><STRONG><a name="[200]"></a>lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1b7]"></a>lv_area_is_point_on</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
</UL>

<P><STRONG><a name="[27a]"></a>lv_area_join</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[209]"></a>lv_area_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
</UL>

<P><STRONG><a name="[1c1]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_pos
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[1bf]"></a>lv_area_set_pos</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lv_area.o(i.lv_area_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_area_set_pos
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[1c0]"></a>lv_area_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_width))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_pos
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[20b]"></a>lv_circ_cont</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_circ.o(i.lv_circ_cont))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
</UL>

<P><STRONG><a name="[205]"></a>lv_circ_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_circ.o(i.lv_circ_init))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[208]"></a>lv_circ_next</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_circ.o(i.lv_circ_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_circ_next
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[1c2]"></a>lv_cont_create</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_cont_create &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
</UL>

<P><STRONG><a name="[1ca]"></a>lv_cont_get_fit_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_cont.o(i.lv_cont_get_fit_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_cont_get_fit_left
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[1cb]"></a>lv_cont_get_fit_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_cont.o(i.lv_cont_get_fit_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_cont_get_fit_top
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[1cc]"></a>lv_cont_get_layout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_cont.o(i.lv_cont_get_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_cont_get_layout
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[1da]"></a>lv_cont_set_fit4</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_set_fit4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_cont_set_fit4 &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_scrl_fit2
</UL>

<P><STRONG><a name="[1db]"></a>lv_disp_buf_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_disp_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>lv_disp_drv_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_hal_disp.o(i.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_disp_drv_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dd]"></a>lv_disp_drv_register</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lv_hal_disp.o(i.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29b]"></a>lv_disp_flush_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_disp_flush
</UL>

<P><STRONG><a name="[1eb]"></a>lv_disp_get_antialiasing</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_antialiasing))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full_straight
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_mid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_straight
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
</UL>

<P><STRONG><a name="[1e4]"></a>lv_disp_get_buf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_buf))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[1df]"></a>lv_disp_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[1e6]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_hor_res))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[198]"></a>lv_disp_get_inv_buf_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_inv_buf_size))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[1ae]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[1b0]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[1b1]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[236]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_ver_res))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[1e1]"></a>lv_disp_is_double_buf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_is_double_buf))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[1e0]"></a>lv_disp_is_true_double_buf</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_is_true_double_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_is_true_double_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[178]"></a>lv_disp_load_scr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_load_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_disp_load_scr &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
</UL>

<P><STRONG><a name="[19e]"></a>lv_disp_pop_from_inv_buf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_pop_from_inv_buf))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[81]"></a>lv_disp_refr_task</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, lv_refr.o(i.lv_disp_refr_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_disp_refr_task &rArr; lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_free_buf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(i.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[207]"></a>lv_draw_aa_get_opa</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_draw.o(i.lv_draw_aa_get_opa))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[1ec]"></a>lv_draw_fill</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, lv_draw_basic.o(i.lv_draw_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_color_fill
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full_straight
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_mid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_straight
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[1e8]"></a>lv_draw_free_buf</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_draw.o(i.lv_draw_free_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_free_buf &rArr; lv_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[1ef]"></a>lv_draw_get_buf</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_draw.o(i.lv_draw_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_draw_get_buf &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
</UL>

<P><STRONG><a name="[1f2]"></a>lv_draw_label</STRONG> (Thumb, 1060 bytes, Stack size 192 bytes, lv_draw_label.o(i.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = lv_draw_label &rArr; lv_draw_rect &rArr; lv_draw_shadow &rArr; lv_draw_shadow_full &rArr; lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_num
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[1fa]"></a>lv_draw_letter</STRONG> (Thumb, 682 bytes, Stack size 160 bytes, lv_draw_basic.o(i.lv_draw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_draw_letter &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[1fe]"></a>lv_draw_px</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_draw_basic.o(i.lv_draw_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_draw_px &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[1f9]"></a>lv_draw_rect</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lv_draw_rect.o(i.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = lv_draw_rect &rArr; lv_draw_shadow &rArr; lv_draw_shadow_full &rArr; lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_mid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_straight
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_on
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[29c]"></a>lv_event_get_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_event_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrl_def_event_cb
</UL>

<P><STRONG><a name="[18b]"></a>lv_event_send</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_obj.o(i.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrl_def_event_cb
</UL>

<P><STRONG><a name="[210]"></a>lv_event_send_func</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lv_obj.o(i.lv_event_send_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>

<P><STRONG><a name="[d]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; get_glyph_dsc_id &rArr; lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_roboto_16.o(.data)
</UL>
<P><STRONG><a name="[1fc]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_font.o(i.lv_font_get_glyph_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[1fb]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_font.o(i.lv_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[c]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_roboto_16.o(.data)
</UL>
<P><STRONG><a name="[1f8]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_font.o(i.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[212]"></a>lv_fs_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_close &rArr; lv_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[213]"></a>lv_fs_get_drv</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_get_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[214]"></a>lv_fs_get_ext</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_get_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[216]"></a>lv_fs_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_init))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[217]"></a>lv_fs_open</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lv_fs.o(i.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_fs_open &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_real_path
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[223]"></a>lv_fs_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_fs.o(i.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[226]"></a>lv_fs_seek</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[219]"></a>lv_group_add_obj</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[1a8]"></a>lv_group_focus_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[1b6]"></a>lv_group_focus_obj</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_focus_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_group_focus_obj &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
</UL>

<P><STRONG><a name="[1a7]"></a>lv_group_focus_prev</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[1b5]"></a>lv_group_get_click_focus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_click_focus))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
</UL>

<P><STRONG><a name="[1a5]"></a>lv_group_get_editing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[1a4]"></a>lv_group_get_focused</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
</UL>

<P><STRONG><a name="[21d]"></a>lv_group_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[21e]"></a>lv_group_mod_style</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_mod_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
</UL>

<P><STRONG><a name="[1a6]"></a>lv_group_send_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_group_send_data &rArr; lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[1aa]"></a>lv_group_set_editing</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
</UL>

<P><STRONG><a name="[21f]"></a>lv_img_cache_invalidate_src</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_img_cache.o(i.lv_img_cache_invalidate_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
</UL>

<P><STRONG><a name="[221]"></a>lv_img_cache_set_size</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lv_img_cache.o(i.lv_img_cache_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_img_cache_set_size &rArr; lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[225]"></a>lv_img_color_format_get_px_size</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_color_format_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[89]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_fs_close &rArr; lv_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i.lv_img_decoder_init)
</UL>
<P><STRONG><a name="[86]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i.lv_img_decoder_init)
</UL>
<P><STRONG><a name="[87]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_color_format_get_px_size
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i.lv_img_decoder_init)
</UL>
<P><STRONG><a name="[88]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_img_decoder_built_in_line_alpha &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_color_format_get_px_size
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i.lv_img_decoder_init)
</UL>
<P><STRONG><a name="[220]"></a>lv_img_decoder_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>

<P><STRONG><a name="[228]"></a>lv_img_decoder_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_img_decoder_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_init
</UL>

<P><STRONG><a name="[229]"></a>lv_img_decoder_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_img_decoder_init &rArr; lv_img_decoder_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[222]"></a>lv_img_src_get_type</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[22a]"></a>lv_indev_drv_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_hal_indev.o(i.lv_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_drv_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22b]"></a>lv_indev_drv_register</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_hal_indev.o(i.lv_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_indev_drv_register &rArr; lv_task_create &rArr; lv_task_create_basic &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[211]"></a>lv_indev_get_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[22c]"></a>lv_indev_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_indev.o(i.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
</UL>

<P><STRONG><a name="[29d]"></a>lv_indev_get_point</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_point))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
</UL>

<P><STRONG><a name="[292]"></a>lv_indev_get_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[26f]"></a>lv_indev_get_vect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_vect))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
</UL>

<P><STRONG><a name="[22d]"></a>lv_indev_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_init &rArr; lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[26c]"></a>lv_indev_is_dragging</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_is_dragging))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[230]"></a>lv_indev_read</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_hal_indev.o(i.lv_indev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[8a]"></a>lv_indev_read_task</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, lv_indev.o(i.lv_indev_read_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_indev_read_task &rArr; indev_proc_release &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_reset_query_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_indev.o(i.lv_indev_drv_register)
</UL>
<P><STRONG><a name="[22e]"></a>lv_indev_reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_indev.o(i.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_init
</UL>

<P><STRONG><a name="[231]"></a>lv_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lv_obj.o(i.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_init &rArr; lv_anim_core_init &rArr; lv_task_create &rArr; lv_task_create_basic &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_core_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>lv_inv_area</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lv_refr.o(i.lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_in
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim
</UL>

<P><STRONG><a name="[179]"></a>lv_label_create</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_label_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_get_size
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_static_text
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_body_draw
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_long_mode
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_body_draw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[23e]"></a>lv_label_get_align</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_align
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[23c]"></a>lv_label_get_body_draw</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_body_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_body_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[247]"></a>lv_label_get_letter_on</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, lv_label.o(i.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_label_get_letter_on &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_is_cmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_up
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_down
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
</UL>

<P><STRONG><a name="[249]"></a>lv_label_get_letter_pos</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, lv_label.o(i.lv_label_get_letter_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_up
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_down
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[238]"></a>lv_label_get_long_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_long_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[23a]"></a>lv_label_get_recolor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_recolor
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[240]"></a>lv_label_get_text</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_text
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_text
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[24a]"></a>lv_label_ins_text</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_ins_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_label_ins_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[23f]"></a>lv_label_set_align</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_label_set_align &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[23d]"></a>lv_label_set_body_draw</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_body_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_label_set_body_draw &rArr; lv_obj_refresh_ext_draw_pad &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[239]"></a>lv_label_set_long_mode</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[23b]"></a>lv_label_set_recolor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_label_set_recolor &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[242]"></a>lv_label_set_static_text</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_static_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_label_set_static_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[17a]"></a>lv_label_set_text</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[253]"></a>lv_ll_chg_list</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_ll.o(i.lv_ll_chg_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_ll_chg_list &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
</UL>

<P><STRONG><a name="[83]"></a>lv_ll_get_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[82]"></a>lv_ll_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[84]"></a>lv_ll_get_prev</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[85]"></a>lv_ll_get_tail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[1ba]"></a>lv_ll_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_core_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_core_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[1be]"></a>lv_ll_ins_head</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_ll.o(i.lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
</UL>

<P><STRONG><a name="[256]"></a>lv_ll_ins_prev</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_ll.o(i.lv_ll_ins_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
</UL>

<P><STRONG><a name="[21c]"></a>lv_ll_ins_tail</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_ll.o(i.lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
</UL>

<P><STRONG><a name="[1a9]"></a>lv_ll_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[257]"></a>lv_ll_move_before</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_ll.o(i.lv_ll_move_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_ll_move_before &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
</UL>

<P><STRONG><a name="[16b]"></a>lv_ll_rem</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lv_ll.o(i.lv_ll_rem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
</UL>

<P><STRONG><a name="[1f1]"></a>lv_mem_alloc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_trunc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_get_next
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_buf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
</UL>

<P><STRONG><a name="[16c]"></a>lv_mem_free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_get_size
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_get_next
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_free_buf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_static_text
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[243]"></a>lv_mem_get_size</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_mem.o(i.lv_mem_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>

<P><STRONG><a name="[232]"></a>lv_mem_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_mem.o(i.lv_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1f0]"></a>lv_mem_realloc</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_get_size
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_trunc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_buf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
</UL>

<P><STRONG><a name="[17b]"></a>lv_obj_align</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[25a]"></a>lv_obj_align_origo</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_align_origo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_align_origo &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
</UL>

<P><STRONG><a name="[1c5]"></a>lv_obj_allocate_ext_attr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_allocate_ext_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_obj_allocate_ext_attr &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
</UL>

<P><STRONG><a name="[1cf]"></a>lv_obj_clear_protect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_clear_protect))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[1c3]"></a>lv_obj_create</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
</UL>

<P><STRONG><a name="[1d7]"></a>lv_obj_get_auto_realign</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_auto_realign))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[1d2]"></a>lv_obj_get_child</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_child))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[1b8]"></a>lv_obj_get_click</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_click))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
</UL>

<P><STRONG><a name="[1a2]"></a>lv_obj_get_coords</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_coords))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
</UL>

<P><STRONG><a name="[261]"></a>lv_obj_get_design_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_design_cb))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
</UL>

<P><STRONG><a name="[172]"></a>lv_obj_get_disp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim
</UL>

<P><STRONG><a name="[196]"></a>lv_obj_get_drag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[197]"></a>lv_obj_get_drag_dir</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_dir))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[195]"></a>lv_obj_get_drag_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_parent))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[1a1]"></a>lv_obj_get_drag_throw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_throw))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
</UL>

<P><STRONG><a name="[170]"></a>lv_obj_get_ext_attr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_ext_attr))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_type
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_static_text
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_text
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_type
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_fit_top
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_fit_left
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_body_draw
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_long_mode
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_body_draw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_start_edge_flash
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_edge_flash
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_edge_flash
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_flash_anim_end
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_flash_anim
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_style
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_max_length
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_accepted_chars
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_up
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_down
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cursor_style
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_is_accepted
</UL>

<P><STRONG><a name="[1b4]"></a>lv_obj_get_group</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[19a]"></a>lv_obj_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_origo
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_down
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[18a]"></a>lv_obj_get_hidden</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_hidden))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[245]"></a>lv_obj_get_opa_scale</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_opa_scale))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[194]"></a>lv_obj_get_parent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrl_def_event_cb
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[25b]"></a>lv_obj_get_screen</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_screen))
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>

<P><STRONG><a name="[1c4]"></a>lv_obj_get_signal_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_signal_cb))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
</UL>

<P><STRONG><a name="[18e]"></a>lv_obj_get_style</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_mod_style
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_style
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_up
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_down
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cursor_style
</UL>

<P><STRONG><a name="[199]"></a>lv_obj_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_origo
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl_width
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[1d3]"></a>lv_obj_get_width_fit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_width_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_obj_get_width_fit &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
</UL>

<P><STRONG><a name="[19b]"></a>lv_obj_get_x</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_x))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_origo
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_hor
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[19c]"></a>lv_obj_get_y</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_y))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_origo
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[182]"></a>lv_obj_invalidate</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_hidden
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_body_draw
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_flash_anim_end
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_flash_anim
</UL>

<P><STRONG><a name="[21a]"></a>lv_obj_is_focused</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_is_focused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_is_focused
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[1ad]"></a>lv_obj_is_protected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_is_protected))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[1b2]"></a>lv_obj_move_foreground</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_move_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
</UL>

<P><STRONG><a name="[1d8]"></a>lv_obj_realign</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_realign))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_origo
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[251]"></a>lv_obj_refresh_ext_draw_pad</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_refresh_ext_draw_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_refresh_ext_draw_pad &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_body_draw
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[1c7]"></a>lv_obj_refresh_style</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_refresh_style &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
</UL>

<P><STRONG><a name="[241]"></a>lv_obj_set_click</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_click))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_drag
</UL>

<P><STRONG><a name="[237]"></a>lv_obj_set_design_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_design_cb))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[25c]"></a>lv_obj_set_drag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_drag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_set_drag
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
</UL>

<P><STRONG><a name="[266]"></a>lv_obj_set_drag_throw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_drag_throw))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
</UL>

<P><STRONG><a name="[267]"></a>lv_obj_set_event_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_event_cb))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
</UL>

<P><STRONG><a name="[24f]"></a>lv_obj_set_height</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[25d]"></a>lv_obj_set_hidden</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_hidden))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_set_hidden &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
</UL>

<P><STRONG><a name="[25e]"></a>lv_obj_set_parent</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_set_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_set_parent &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[19d]"></a>lv_obj_set_pos</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_origo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[1ce]"></a>lv_obj_set_protect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_protect))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[1c6]"></a>lv_obj_set_signal_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_signal_cb))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
</UL>

<P><STRONG><a name="[24d]"></a>lv_obj_set_size</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[1c9]"></a>lv_obj_set_style</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_set_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
</UL>

<P><STRONG><a name="[17f]"></a>lv_obj_set_width</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[90]"></a>lv_obj_set_x</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_set_long_mode)
<LI> lv_page.o(i.lv_page_scroll_hor)
</UL>
<P><STRONG><a name="[91]"></a>lv_obj_set_y</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_set_long_mode)
<LI> lv_page.o(i.lv_page_scroll_ver)
</UL>
<P><STRONG><a name="[177]"></a>lv_page_create</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, lv_page.o(i.lv_page_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_page_create &rArr; lv_cont_create &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_protect
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_event_cb
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_drag_throw
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_drag
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[268]"></a>lv_page_get_edge_flash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_page.o(i.lv_page_get_edge_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_page_get_edge_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[269]"></a>lv_page_get_fit_width</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_page.o(i.lv_page_get_fit_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_page_get_fit_width &rArr; lv_page_get_style &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[26a]"></a>lv_page_get_scrl</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_page.o(i.lv_page_get_scrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_page_get_scrl
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_hor
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl_width
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_scrl_fit2
</UL>

<P><STRONG><a name="[263]"></a>lv_page_get_style</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_page.o(i.lv_page_get_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_page_get_style &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_style
</UL>

<P><STRONG><a name="[26d]"></a>lv_page_scroll_hor</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, lv_page.o(i.lv_page_scroll_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_page_scroll_hor &rArr; lv_anim_create &rArr; lv_anim_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[26e]"></a>lv_page_scroll_ver</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, lv_page.o(i.lv_page_scroll_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_page_scroll_ver &rArr; lv_anim_create &rArr; lv_anim_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[273]"></a>lv_page_set_edge_flash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_page.o(i.lv_page_set_edge_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_page_set_edge_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_edge_flash
</UL>

<P><STRONG><a name="[262]"></a>lv_page_set_sb_mode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_page.o(i.lv_page_set_sb_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_page_set_sb_mode &rArr; lv_page_sb_refresh &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
</UL>

<P><STRONG><a name="[264]"></a>lv_page_set_style</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_page.o(i.lv_page_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_page_set_style &rArr; lv_page_sb_refresh &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
</UL>

<P><STRONG><a name="[271]"></a>lv_page_start_edge_flash</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, lv_page.o(i.lv_page_start_edge_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_page_start_edge_flash &rArr; lv_anim_create &rArr; lv_anim_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
</UL>

<P><STRONG><a name="[1ea]"></a>lv_refr_get_disp_refreshing</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_refr.o(i.lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full_straight
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_mid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_straight
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_color_fill
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
</UL>

<P><STRONG><a name="[235]"></a>lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(i.lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[18f]"></a>lv_style_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_copy))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_mod_style
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cursor_style
</UL>

<P><STRONG><a name="[234]"></a>lv_style_init</STRONG> (Thumb, 1304 bytes, Stack size 32 bytes, lv_style.o(i.lv_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_style_init &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[27d]"></a>lv_ta_add_char</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, lv_ta.o(i.lv_ta_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_edge_flash
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_edge_flash
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_is_accepted
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[27e]"></a>lv_ta_add_text</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, lv_ta.o(i.lv_ta_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + In Cycle
<LI>Call Chain = lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_edge_flash
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_max_length
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_accepted_chars
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_edge_flash
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[17d]"></a>lv_ta_create</STRONG> (Thumb, 572 bytes, Stack size 64 bytes, lv_ta.o(i.lv_ta_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_ta_create &rArr; lv_ta_set_one_line &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_get_size
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_style
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_scrl_fit2
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
</UL>

<P><STRONG><a name="[288]"></a>lv_ta_cursor_down</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lv_ta.o(i.lv_ta_cursor_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_ta_cursor_down &rArr; lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[289]"></a>lv_ta_cursor_left</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_cursor_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_ta_cursor_left &rArr; lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[28a]"></a>lv_ta_cursor_right</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_cursor_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_ta_cursor_right &rArr; lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[28b]"></a>lv_ta_cursor_up</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_ta.o(i.lv_ta_cursor_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_ta_cursor_up &rArr; lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[28c]"></a>lv_ta_del_char</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, lv_ta.o(i.lv_ta_del_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_ta_del_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_cut
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char_forward
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[28e]"></a>lv_ta_del_char_forward</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_ta.o(i.lv_ta_del_char_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_ta_del_char_forward &rArr; lv_ta_del_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[284]"></a>lv_ta_get_accepted_chars</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_get_accepted_chars))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_get_accepted_chars
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
</UL>

<P><STRONG><a name="[281]"></a>lv_ta_get_cursor_pos</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_get_cursor_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_get_cursor_pos
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_right
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_left
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char_forward
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_up
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_down
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[28f]"></a>lv_ta_get_cursor_type</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_get_cursor_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_get_cursor_type
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[285]"></a>lv_ta_get_max_length</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_get_max_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_get_max_length
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
</UL>

<P><STRONG><a name="[287]"></a>lv_ta_get_style</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_ta.o(i.lv_ta_get_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_ta_get_style &rArr; lv_page_get_style &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[171]"></a>lv_ta_get_text</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_get_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_ta_get_text &rArr; lv_label_get_text
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_is_accepted
</UL>

<P><STRONG><a name="[282]"></a>lv_ta_set_cursor_pos</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, lv_ta.o(i.lv_ta_set_cursor_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_right
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_left
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char_forward
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_up
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_down
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[181]"></a>lv_ta_set_cursor_type</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_ta.o(i.lv_ta_set_cursor_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_ta_set_cursor_type &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[17e]"></a>lv_ta_set_one_line</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lv_ta.o(i.lv_ta_set_one_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_ta_set_one_line &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_scrl_fit2
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[286]"></a>lv_ta_set_style</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_ta.o(i.lv_ta_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_ta_set_style &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[180]"></a>lv_ta_set_text</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, lv_ta.o(i.lv_ta_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_max_length
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_accepted_chars
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[233]"></a>lv_task_core_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_task_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1bb]"></a>lv_task_create</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_task.o(i.lv_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_task_create &rArr; lv_task_create_basic &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_core_init
</UL>

<P><STRONG><a name="[293]"></a>lv_task_create_basic</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_create_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_task_create_basic &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[295]"></a>lv_task_del</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_task_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[142]"></a>lv_task_handler</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lv_task.o(i.lv_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_task_handler &rArr; lv_task_exec &rArr; lv_task_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[1de]"></a>lv_task_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_task_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[294]"></a>lv_task_set_prio</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_set_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_task_set_prio &rArr; lv_ll_move_before &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[1c8]"></a>lv_theme_get_current</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_theme.o(i.lv_theme_get_current))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
</UL>

<P><STRONG><a name="[16d]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_hal_tick.o(i.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[16e]"></a>lv_tick_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_core_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[141]"></a>lv_tick_inc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[28d]"></a>lv_txt_cut</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_cut
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
</UL>

<P><STRONG><a name="[1f4]"></a>lv_txt_get_next_line</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, lv_txt.o(i.lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
</UL>

<P><STRONG><a name="[1f3]"></a>lv_txt_get_size</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, lv_txt.o(i.lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_txt_get_size &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[1f5]"></a>lv_txt_get_width</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, lv_txt.o(i.lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_txt_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
</UL>

<P><STRONG><a name="[24b]"></a>lv_txt_ins</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_ins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_ins
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
</UL>

<P><STRONG><a name="[248]"></a>lv_txt_is_cmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[191]"></a>lv_utils_bsearch</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lv_utils.o(i.lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[70]"></a>main</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = main &rArr; displayScr &rArr; lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2string
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcarrayInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMin
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMax
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[dd]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2string
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcarrayInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBuff
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateQueue
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2String
</UL>

<P><STRONG><a name="[a3]"></a>my_disp_flush</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, main.o(i.my_disp_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = my_disp_flush &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[a4]"></a>my_touchpad_read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(i.my_touchpad_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_touchpad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4]"></a>read_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.read_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[15d]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[298]"></a>uart_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>usmart_cmd_rec</STRONG> (Thumb, 144 bytes, Stack size 104 bytes, usmart.o(i.usmart_cmd_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>usmart_exe</STRONG> (Thumb, 514 bytes, Stack size 128 bytes, usmart.o(i.usmart_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usmart_exe &rArr; usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_reset_runtime
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_runtime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[2a5]"></a>usmart_get_aparm</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, usmart_str.o(i.usmart_get_aparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[2ab]"></a>usmart_get_cmdname</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, usmart_str.o(i.usmart_get_cmdname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usmart_get_cmdname
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[29e]"></a>usmart_get_fname</STRONG> (Thumb, 358 bytes, Stack size 60 bytes, usmart_str.o(i.usmart_get_fname))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[2a0]"></a>usmart_get_fparam</STRONG> (Thumb, 208 bytes, Stack size 240 bytes, usmart_str.o(i.usmart_get_fparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strlen
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[2a1]"></a>usmart_get_parmpos</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usmart_str.o(i.usmart_get_parmpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_get_parmpos
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[2a3]"></a>usmart_get_runtime</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usmart.o(i.usmart_get_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[8]"></a>usmart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usmart.o(i.usmart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usmart_init &rArr; Timer4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[2aa]"></a>usmart_pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_pow))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
</UL>

<P><STRONG><a name="[2a2]"></a>usmart_reset_runtime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usmart.o(i.usmart_reset_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[b]"></a>usmart_scan</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usmart.o(i.usmart_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = usmart_scan &rArr; usmart_sys_cmd_exe &rArr; usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[2a4]"></a>usmart_search_nextc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_search_nextc))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>

<P><STRONG><a name="[2a6]"></a>usmart_str2num</STRONG> (Thumb, 214 bytes, Stack size 28 bytes, usmart_str.o(i.usmart_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[29f]"></a>usmart_strcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcmp))
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[2a8]"></a>usmart_strcopy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcopy))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[2a7]"></a>usmart_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[2a9]"></a>usmart_sys_cmd_exe</STRONG> (Thumb, 1458 bytes, Stack size 72 bytes, usmart.o(i.usmart_sys_cmd_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = usmart_sys_cmd_exe &rArr; usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_cmdname
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
</UL>

<P><STRONG><a name="[5]"></a>write_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.write_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e1]"></a>Succ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queues.o(i.Succ))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dequeue
</UL>

<P><STRONG><a name="[17c]"></a>lv_scr_act</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen.o(i.lv_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_scr_act &rArr; lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayScr
</UL>

<P><STRONG><a name="[76]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[115]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[118]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[75]"></a>ADC_DMAError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[74]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[ed]"></a>ADC_Init</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[f5]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f4]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f6]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[fe]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[189]"></a>focus_next_core</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lv_group.o(i.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>

<P><STRONG><a name="[21b]"></a>lv_group_refocus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_refocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[18c]"></a>obj_to_foreground</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_group.o(i.obj_to_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[193]"></a>indev_drag</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, lv_indev.o(i.indev_drag))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = indev_drag &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_parent
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_pop_from_inv_buf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_inv_buf_size
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[1a0]"></a>indev_drag_throw</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, lv_indev.o(i.indev_drag_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_parent
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[1a3]"></a>indev_encoder_proc</STRONG> (Thumb, 734 bytes, Stack size 40 bytes, lv_indev.o(i.indev_encoder_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = indev_encoder_proc &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_is_empty
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[1ab]"></a>indev_keypad_proc</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, lv_indev.o(i.indev_keypad_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = indev_keypad_proc &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[1ac]"></a>indev_proc_press</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, lv_indev.o(i.indev_proc_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = indev_proc_press &rArr; indev_drag &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[1b3]"></a>indev_proc_release</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, lv_indev.o(i.indev_proc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = indev_proc_release &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_parent
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_click_focus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[22f]"></a>indev_proc_reset_query_handler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lv_indev.o(i.indev_proc_reset_query_handler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[19f]"></a>indev_reset_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_indev.o(i.indev_reset_check))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[1af]"></a>indev_search_obj</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lv_indev.o(i.indev_search_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = indev_search_obj &rArr;  indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_point_on
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[93]"></a>lv_obj_design</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = lv_obj_design &rArr; lv_draw_rect &rArr; lv_draw_shadow &rArr; lv_draw_shadow_full &rArr; lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_in
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[92]"></a>lv_obj_signal</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_signal &rArr; lv_obj_refresh_ext_draw_pad &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[25f]"></a>refresh_children_position</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_obj.o(i.refresh_children_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = refresh_children_position &rArr;  refresh_children_position (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>

<P><STRONG><a name="[260]"></a>refresh_children_style</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj.o(i.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
</UL>

<P><STRONG><a name="[275]"></a>lv_refr_area</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, lv_refr.o(i.lv_refr_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_refr_area &rArr; lv_refr_area_part &rArr; lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
</UL>

<P><STRONG><a name="[276]"></a>lv_refr_area_part</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_refr.o(i.lv_refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_refr_area_part &rArr; lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[1e3]"></a>lv_refr_areas</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_areas))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[277]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_refr.o(i.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_in
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[1e2]"></a>lv_refr_join_area</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_join_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_refr_join_area &rArr; lv_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_join
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_on
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[27b]"></a>lv_refr_obj</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, lv_refr.o(i.lv_refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[278]"></a>lv_refr_obj_and_children</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[1e5]"></a>lv_refr_vdb_flush</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_vdb_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_refr_vdb_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[27c]"></a>lv_color_make</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_style.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>

<P><STRONG><a name="[1fd]"></a>lv_color_mix</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, lv_draw_basic.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_color_fill
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
</UL>

<P><STRONG><a name="[1ee]"></a>sw_color_fill</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, lv_draw_basic.o(i.sw_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
</UL>

<P><STRONG><a name="[1f7]"></a>hex_char_to_num</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lv_draw_label.o(i.hex_char_to_num))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[1f6]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_label.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[206]"></a>antialias_get_opa_circ</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_draw_rect.o(i.antialias_get_opa_circ))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[20a]"></a>lv_color_mix</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, lv_draw_rect.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_mid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
</UL>

<P><STRONG><a name="[1e9]"></a>lv_draw_cont_radius_corr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_draw_rect.o(i.lv_draw_cont_radius_corr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_cont_radius_corr
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full_straight
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_mid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_straight
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[204]"></a>lv_draw_rect_border_corner</STRONG> (Thumb, 2670 bytes, Stack size 208 bytes, lv_draw_rect.o(i.lv_draw_rect_border_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_draw_rect_border_corner &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antialias_get_opa_circ
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_aa_get_opa
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_next
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[203]"></a>lv_draw_rect_border_straight</STRONG> (Thumb, 942 bytes, Stack size 72 bytes, lv_draw_rect.o(i.lv_draw_rect_border_straight))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = lv_draw_rect_border_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[202]"></a>lv_draw_rect_main_corner</STRONG> (Thumb, 2086 bytes, Stack size 240 bytes, lv_draw_rect.o(i.lv_draw_rect_main_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lv_draw_rect_main_corner &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antialias_get_opa_circ
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_aa_get_opa
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_next
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_cont
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[201]"></a>lv_draw_rect_main_mid</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, lv_draw_rect.o(i.lv_draw_rect_main_mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = lv_draw_rect_main_mid &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1ff]"></a>lv_draw_shadow</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lv_draw_rect.o(i.lv_draw_shadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lv_draw_shadow &rArr; lv_draw_shadow_full &rArr; lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[20d]"></a>lv_draw_shadow_bottom</STRONG> (Thumb, 532 bytes, Stack size 152 bytes, lv_draw_rect.o(i.lv_draw_shadow_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lv_draw_shadow_bottom &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_buf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_next
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_cont
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow
</UL>

<P><STRONG><a name="[20e]"></a>lv_draw_shadow_full</STRONG> (Thumb, 808 bytes, Stack size 192 bytes, lv_draw_rect.o(i.lv_draw_shadow_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_draw_shadow_full &rArr; lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full_straight
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_buf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_next
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_cont
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow
</UL>

<P><STRONG><a name="[20f]"></a>lv_draw_shadow_full_straight</STRONG> (Thumb, 346 bytes, Stack size 88 bytes, lv_draw_rect.o(i.lv_draw_shadow_full_straight))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
</UL>

<P><STRONG><a name="[224]"></a>lv_img_decoder_built_in_line_alpha</STRONG> (Thumb, 354 bytes, Stack size 544 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_img_decoder_built_in_line_alpha &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_color_format_get_px_size
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[227]"></a>lv_img_decoder_built_in_line_indexed</STRONG> (Thumb, 290 bytes, Stack size 520 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_img_decoder_built_in_line_indexed &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_color_format_get_px_size
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[190]"></a>get_glyph_dsc_id</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(i.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_glyph_dsc_id &rArr; lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[192]"></a>get_kern_value</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_font_fmt_txt.o(i.get_kern_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_kern_value &rArr; lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
</UL>

<P><STRONG><a name="[7e]"></a>kern_pair_16_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[7d]"></a>kern_pair_8_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[7c]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[169]"></a>anim_ready_handler</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, lv_anim.o(i.anim_ready_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = anim_ready_handler &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
</UL>

<P><STRONG><a name="[7f]"></a>anim_task</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lv_anim.o(i.anim_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = anim_task &rArr; anim_ready_handler &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(i.lv_anim_core_init)
</UL>
<P><STRONG><a name="[218]"></a>lv_fs_get_real_path</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_get_real_path))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[255]"></a>node_set_next</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_ll.o(i.node_set_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = node_set_next
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
</UL>

<P><STRONG><a name="[254]"></a>node_set_prev</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_ll.o(i.node_set_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
</UL>

<P><STRONG><a name="[258]"></a>ent_get_next</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_mem.o(i.ent_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>

<P><STRONG><a name="[259]"></a>ent_trunc</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lv_mem.o(i.ent_trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ent_trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>

<P><STRONG><a name="[296]"></a>lv_task_exec</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_task_exec &rArr; lv_task_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>

<P><STRONG><a name="[12]"></a>lv_txt_unicode_to_utf8</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lv_txt.o(i.lv_txt_unicode_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_unicode_to_utf8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>lv_txt_utf8_next</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, lv_txt.o(i.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>lv_txt_utf8_size</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1cd]"></a>lv_cont_layout_center</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lv_cont.o(i.lv_cont_layout_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_cont_layout_center &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_protect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[1d0]"></a>lv_cont_layout_col</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, lv_cont.o(i.lv_cont_layout_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_cont_layout_col &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_protect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[1d1]"></a>lv_cont_layout_grid</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, lv_cont.o(i.lv_cont_layout_grid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_cont_layout_grid &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_protect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[1d4]"></a>lv_cont_layout_pretty</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, lv_cont.o(i.lv_cont_layout_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_cont_layout_pretty &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_protect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[1d5]"></a>lv_cont_layout_row</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lv_cont.o(i.lv_cont_layout_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_cont_layout_row &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_protect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[1d6]"></a>lv_cont_refr_autofit</STRONG> (Thumb, 676 bytes, Stack size 56 bytes, lv_cont.o(i.lv_cont_refr_autofit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_cont_refr_autofit &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_is_empty
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_auto_realign
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[1d9]"></a>lv_cont_refr_layout</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_cont.o(i.lv_cont_refr_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_cont_refr_layout &rArr; lv_cont_layout_pretty &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[80]"></a>lv_cont_signal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_cont_signal &rArr; lv_cont_refr_autofit &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cont.o(i.lv_cont_create)
</UL>
<P><STRONG><a name="[8b]"></a>lv_label_design</STRONG> (Thumb, 482 bytes, Stack size 96 bytes, lv_label.o(i.lv_label_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = lv_label_design &rArr; lv_draw_label &rArr; lv_draw_rect &rArr; lv_draw_shadow &rArr; lv_draw_shadow_full &rArr; lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[246]"></a>lv_label_dot_tmp_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_dot_tmp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_label_dot_tmp_free &rArr; lv_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>

<P><STRONG><a name="[24c]"></a>lv_label_refr_text</STRONG> (Thumb, 804 bytes, Stack size 88 bytes, lv_label.o(i.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_static_text
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[250]"></a>lv_label_revert_dots</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_label_revert_dots &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[244]"></a>lv_label_set_dot_tmp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_set_dot_tmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_label_set_dot_tmp &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[8e]"></a>lv_label_set_offset_x</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_offset_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_label_set_offset_x &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[8f]"></a>lv_label_set_offset_y</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_offset_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_label_set_offset_y &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[8c]"></a>lv_label_signal</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_label_signal &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[99]"></a>edge_flash_anim</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_page.o(i.edge_flash_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = edge_flash_anim &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_start_edge_flash)
</UL>
<P><STRONG><a name="[9a]"></a>edge_flash_anim_end</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_page.o(i.edge_flash_anim_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = edge_flash_anim_end &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_start_edge_flash)
</UL>
<P><STRONG><a name="[272]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_page.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
</UL>

<P><STRONG><a name="[270]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_page.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
</UL>

<P><STRONG><a name="[96]"></a>lv_page_design</STRONG> (Thumb, 526 bytes, Stack size 168 bytes, lv_page.o(i.lv_page_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = lv_page_design &rArr; lv_draw_rect &rArr; lv_draw_shadow &rArr; lv_draw_shadow_full &rArr; lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[26b]"></a>lv_page_get_scrl_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_page.o(i.lv_page_get_scrl_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_page_get_scrl_width &rArr; lv_page_get_scrl
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[265]"></a>lv_page_sb_refresh</STRONG> (Thumb, 862 bytes, Stack size 64 bytes, lv_page.o(i.lv_page_sb_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_page_sb_refresh &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_is_dragging
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
</UL>

<P><STRONG><a name="[94]"></a>lv_page_scrollable_signal</STRONG> (Thumb, 1042 bytes, Stack size 136 bytes, lv_page.o(i.lv_page_scrollable_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_page_scrollable_signal &rArr; lv_page_start_edge_flash &rArr; lv_anim_create &rArr; lv_anim_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_is_dragging
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_start_edge_flash
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[95]"></a>lv_page_signal</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, lv_page.o(i.lv_page_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_page_signal &rArr; lv_page_scroll_ver &rArr; lv_anim_create &rArr; lv_anim_del &rArr; lv_ll_rem &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_fit_top
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_fit_left
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_hor
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl_width
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[97]"></a>lv_scrl_design</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lv_page.o(i.lv_scrl_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_scrl_design &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_mod_style
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[98]"></a>scrl_def_event_cb</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_page.o(i.scrl_def_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scrl_def_event_cb &rArr; lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[16f]"></a>char_is_accepted</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_ta.o(i.char_is_accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = char_is_accepted &rArr; lv_ta_get_text &rArr; lv_label_get_text
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[a2]"></a>cursor_blink_anim</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lv_ta.o(i.cursor_blink_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cursor_blink_anim &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_ta.o(i.lv_ta_create)
<LI> lv_ta.o(i.lv_ta_set_cursor_pos)
</UL>
<P><STRONG><a name="[18d]"></a>get_cursor_style</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_ta.o(i.get_cursor_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_cursor_style &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[274]"></a>lv_page_set_scrl_fit2</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_ta.o(i.lv_page_set_scrl_fit2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_page_set_scrl_fit2 &rArr; lv_cont_set_fit4 &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[a0]"></a>lv_ta_design</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_design
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_ta.o(i.lv_ta_create)
</UL>
<P><STRONG><a name="[a1]"></a>lv_ta_scrollable_design</STRONG> (Thumb, 332 bytes, Stack size 128 bytes, lv_ta.o(i.lv_ta_scrollable_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = lv_ta_scrollable_design &rArr; lv_draw_label &rArr; lv_draw_rect &rArr; lv_draw_shadow &rArr; lv_draw_shadow_full &rArr; lv_draw_shadow_full_straight &rArr; lv_draw_fill &rArr; sw_color_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cursor_style
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_ta.o(i.lv_ta_create)
</UL>
<P><STRONG><a name="[9f]"></a>lv_ta_scrollable_signal</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, lv_ta.o(i.lv_ta_scrollable_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_ta_scrollable_signal &rArr; update_cursor_position_on_click &rArr; lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_ta.o(i.lv_ta_create)
</UL>
<P><STRONG><a name="[27f]"></a>lv_ta_set_edge_flash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_ta.o(i.lv_ta_set_edge_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_set_edge_flash &rArr; lv_page_set_edge_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_edge_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[9e]"></a>lv_ta_signal</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, lv_ta.o(i.lv_ta_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_ta_signal &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_type
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_right
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_left
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char_forward
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_up
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_down
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor_position_on_click
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_ta.o(i.lv_ta_create)
</UL>
<P><STRONG><a name="[283]"></a>placeholder_update</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_ta.o(i.placeholder_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = placeholder_update &rArr; lv_obj_set_width &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_hidden
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_text
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[280]"></a>pwd_char_hider</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_ta.o(i.pwd_char_hider))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider_anim_ready
</UL>

<P><STRONG><a name="[9b]"></a>pwd_char_hider_anim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_ta.o(i.pwd_char_hider_anim))
<BR>[Address Reference Count : 3]<UL><LI> lv_ta.o(i.lv_ta_add_char)
<LI> lv_ta.o(i.lv_ta_add_text)
<LI> lv_ta.o(i.lv_ta_set_text)
</UL>
<P><STRONG><a name="[9c]"></a>pwd_char_hider_anim_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_ta.o(i.pwd_char_hider_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pwd_char_hider_anim_ready &rArr; pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_ta.o(i.lv_ta_add_char)
<LI> lv_ta.o(i.lv_ta_add_text)
<LI> lv_ta.o(i.lv_ta_set_text)
</UL>
<P><STRONG><a name="[290]"></a>refr_cursor_area</STRONG> (Thumb, 668 bytes, Stack size 160 bytes, lv_ta.o(i.refr_cursor_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cursor_style
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_type
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[291]"></a>update_cursor_position_on_click</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, lv_ta.o(i.update_cursor_position_on_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = update_cursor_position_on_click &rArr; lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[164]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[156]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[166]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[165]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
